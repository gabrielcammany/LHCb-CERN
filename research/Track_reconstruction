Track reconstruction will create tracks from the predicted hits in the NN model from PredictAllStationLayers_NN.

Data Features found: 

    - Slope of X0 vs X1 (8190 particles)
        Mean 0.016
        Variance 0.440
        
    - Slope of X0 vs U
        Mean -0.062931 
        Variance 3.852878 
        
    - Slope of V vs U
        Mean 0.019983 
        Variance 3.943988 
        
    - Slope of X1 vs U
        Mean 0.077136 
        Variance 3.207860 

In order to reduce the number of hits, I have applied:

    Layer 3:
    
    - Removed all hits with slope bigger or equal to 0.9
    - Removed all hits with a difference from the X0 bigger or equal to 180
    - Positive hits:
        * If the predicted X1 is bigger than the real X0, get all hits bigger than X0
        * Remove all hits smaller than the predicted position minous 10. 
    - Negative hits:
        * If the predicted X1 is smaller than the real X0, get all hits smaller than X0
        * Remove all hits bigger than the predicted position plus 10. 

    Layer 2:
    
    - Removed all hits with slope bigger or equal to 1.5
    - Removed all hits with a difference from the X0 bigger or equal to 220
    - Positive hits:
        * arr_layer2 > predicted[1] - 60
        * arr_layer2 < predicted[1] + 150
    - Negative hits:
        * arr_layer2 < predicted[1] + 60
        * arr_layer2 > predicted[1] - 150
    
With only 10 hit max: (with 7174 tracks)

    Mean found 3: 0.719125
    Mean total found 3: 4.606356
    Mean pos found 3: 1.086423

    Mean found 2: 0.792027
    Mean total found 2: 6.575551
    Mean pos found 2: 1.675634

    Mean Total Found: 0.618344

With only 15 hit max: (with 7174 tracks)
    
    Mean found 3: 0.774045
    Mean total found 3: 5.874826
    Mean pos found 3: 1.410231

    Mean found 2: 0.836493
    Mean total found 2: 8.052272
    Mean pos found 2: 2.141623

    Mean Total Found: 0.679955
    
Track reconstruction using the track_classifier NN

- Created a track with at least one hit similar to the real one:

    Mean found 3: 0.944476
    Mean total found 3: 12.773734
    Mean pos found 3: 3.217779

    Mean found 2: 0.945196
    Mean total found 2: 12.761220
    Mean pos found 2: 2.886507

    Mean Total Found: 0.308257

- As it can be seen, there are too much tracks found, so it is not really a viable solution.
    
Next version of the algorithm shows:
    
    The logic behind this new version is:
    - Iterate over all hits found from outwards (last X layer) towards the U-layer. For inside for, inside for. 
    - For each hit predicted in the last U-layer, a comparison between this one and the 
    last one, in terms of height is done. Discarding the ones with more than 15 difference between. 
    - Create tracks for each combination of hits that have less than 15 of difference and collect their height in a separate list.
    - Once hit combination per each layer is done, iterate over possible valid height hits and sort list based on the less difference between the actual height iteration.
    - Get the first value of each sorted list to create track candidate.
    
    - Results
        Event 1/5 	 Acc: 0.720000 Size 2.946667 Repeated: 0.447964
        Event 2/5 	 Acc: 0.685714 Size 3.371429 Repeated: 0.326271
        Event 3/5 	 Acc: 0.578431 Size 3.078431 Repeated: 0.302548
        Event 4/5 	 Acc: 0.652632 Size 2.073684 Repeated: 0.502538
        Event 5/5 	 Acc: 0.485714 Size 4.205714 Repeated: 0.216033

        Final Result:
            Mean: 0.624498
            Size: 3.135185
            Repeated: 0.338229

I found out that the actual implementation of the algorithm is not actually working correctly, this is because I was iterating over particles rather over hits, which is what I would be finding out when executing the track reconstruction algorithm. Because of this, I have changed the structure of the algorithm for a first version:
        
    Pretty bad, the idea is the following:
    - Reconstruct all tracks differently from each station, this is, create a index tree (rtree) with all tracks reconstructed, with different position for each station.
    - Once all tracks are reconstructed from each station, iterate over all available tracks in the first station:
    - For each first station track, look for second and third station track candidates based on a prediction from a NN, which has:
    
        * Input/output:
            In: [X_final[0], X_final[1], h1, X_final[2], h2, X_final[3]]
            Out: [X_final[4], h3, h4, X_final[8], h5, h6]
        * Structure
            _________________________________________________________________
            Layer (type)                 Output Shape              Param #   
            =================================================================
            dense_15 (Dense)             (None, 12)                84        
            _________________________________________________________________
            dense_16 (Dense)             (None, 8)                 104       
            _________________________________________________________________
            dense_17 (Dense)             (None, 8)                 72        
            _________________________________________________________________
            dense_18 (Dense)             (None, 6)                 54        
            =================================================================
            
            45998/45998 [==============================] - 1s 19us/sample - loss: 330202.2550 - acc: 0.6412 - val_loss: 53362.9105 - val_acc: 0.6560
            
    - Then execute a index intersection: (being next_tracks the output of the NN)
        list(track_tree.intersection((next_tracks[0] - 150, next_tracks[0] + 150, min_h - 80, max_h + 80, 1, 1), objects='raw'))
    - Next once I have a list from each r-tree, validate each first, second and third track to find the best candidate using another NN:
        
        * Input/output:
            In: track[0][:6] + track[1][:6] + track[2][:6]
            Out: 1/0 (being 1 when all three tracks has 6 or more same hits between each station track)
        * Structure
            _________________________________________________________________
            Layer (type)                 Output Shape              Param #   
            =================================================================
            dense (Dense)                (None, 24)                456       
            _________________________________________________________________
            dense_1 (Dense)              (None, 8)                 200       
            _________________________________________________________________
            dense_2 (Dense)              (None, 8)                 72        
            _________________________________________________________________
            dense_3 (Dense)              (None, 1)                 9         
            =================================================================
            Total params: 737
            Trainable params: 737
            Non-trainable params: 0
            _________________________________________________________________
            Epoch 15/15 71806/71806 [==============================] - 6s 81us/sample - loss: 0.3094 - acc: 0.8794 - val_loss: 0.2526 - val_acc: 0.9128
                
                X Train length: 79785
                X Test Length 26596
                Y Train length: 79785
                Y Test length: 26596
    - After selecting the union which works best, I end up with a list of combinations of [First, second , third], as before was selecting which one was better for a first-second combination. 
    - Execute another NN classifing with the same NN as before to select the final First, Second and Third combination.
    - End up with a validation of results, and... 
        Results:
            Time to evaluate all tracks: 3.5686588287353516
            Event 1/5 	 Acc: 0.313953 Ghost: 0.116279
            
            Time to evaluate all tracks: 17.64958930015564
            Event 2/5 	 Acc: 0.233333 Ghost: 0.288889
            
            Time to evaluate all tracks: 22.657678365707397
            Event 3/5 	 Acc: 0.222222 Ghost: 0.190476
            
            Time to evaluate all tracks: 18.614060640335083
            Event 4/5 	 Acc: 0.174757 Ghost: 0.194175
            
            Time to evaluate all tracks: 46.79869055747986
            Event 5/5 	 Acc: 0.190476 Ghost: 0.275132
